// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package factory

import (
	"errors"
	"fmt"
	"strings"
)

const (
	WireValueSelf  WireValue = "self"
	WireValueAuto  WireValue = "auto"
	WireValueType  WireValue = "type"
	WireValueName  WireValue = "name"
	WireValueValue WireValue = "value"
)

var ErrInvalidWireValue = errors.New("not a valid WireValue")

var _WireValueNameMap = map[string]WireValue{
	"self":  WireValueSelf,
	"auto":  WireValueAuto,
	"type":  WireValueType,
	"name":  WireValueName,
	"value": WireValueValue,
}

// Name is the attribute of WireValue.
func (x WireValue) Name() string {
	if v, ok := _WireValueNameMap[string(x)]; ok {
		return string(v)
	}
	return fmt.Sprintf("WireValue(%s).Name", string(x))
}

// Val is the attribute of WireValue.
func (x WireValue) Val() string {
	return string(x)
}

var _WireValueValues = []WireValue{
	WireValueSelf,
	WireValueAuto,
	WireValueType,
	WireValueName,
	WireValueValue,
}

// WireValueValues returns a list of the values of WireValue
func WireValueValues() []WireValue {
	return _WireValueValues
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x WireValue) IsValid() bool {
	_, ok := _WireValueNameMap[string(x)]
	return ok
}

// String implements the Stringer interface.
func (x WireValue) String() string {
	return x.Name()
}

// ParseWireValue converts a string to a WireValue.
func ParseWireValue(value string) (WireValue, error) {
	if x, ok := _WireValueNameMap[value]; ok {
		return x, nil
	}
	if x, ok := _WireValueNameMap[strings.ToLower(value)]; ok {
		return x, nil
	}
	return "", fmt.Errorf("%s is %w", value, ErrInvalidWireValue)
}

// MarshalText implements the text marshaller method.
func (x WireValue) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *WireValue) UnmarshalText(text []byte) error {
	val, err := ParseWireValue(string(text))
	if err != nil {
		return err
	}
	*x = val
	return nil
}
